buildscript {
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:7.3.1")
    }
}

apply plugin: 'com.android.library'

// Define fbjniHeadersDir as a project-wide property
project.ext.fbjniHeadersDir = new File(project.buildDir, "generated/source/fbjni-headers").absolutePath

android {
    namespace "com.austinksmith.reactnativeworkerbee"
    compileSdkVersion rootProject.ext.hasProperty('compileSdkVersion') ? rootProject.ext.compileSdkVersion : 31

    defaultConfig {
        minSdkVersion rootProject.ext.hasProperty('minSdkVersion') ? rootProject.ext.minSdkVersion : 23
        targetSdkVersion rootProject.ext.hasProperty('targetSdkVersion') ? rootProject.ext.targetSdkVersion : 31

        externalNativeBuild {
            cmake {
                arguments "-DFBJNI_HEADERS_DIR=${project.ext.fbjniHeadersDir}",
                          "-DNODE_MODULES_DIR=${rootProject.projectDir}/../node_modules"
                          "-DANDROID_STL=c++_shared"
                cppFlags "-std=c++17"
            }
        }

        ndk {
            stl "c++_shared"
        }
    }

    externalNativeBuild {
        cmake {
            path file("${project.rootDir}/../node_modules/react-native-workerbee/android/CMakeLists.txt")
            version "3.22.1"
        }
    }

    buildFeatures {
        prefab false
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java {
                srcDirs = ['src/main/java', 'src/main/java-sdk23']
            }
        }
    }
}

repositories {
    mavenCentral()
    google()
}

dependencies {
    implementation("com.facebook.react:react-native:+") {
        exclude group:'com.facebook.fbjni'
    }
    implementation 'com.facebook.fbjni:fbjni:0.3.0'
}

configurations {
    workerbeeHeaders
}

dependencies {
    workerbeeHeaders("com.facebook.fbjni:fbjni:0.3.0")
}

task createFbjniDir {
    doLast {
        file(project.ext.fbjniHeadersDir).mkdirs()
    }
}

task extractWorkerBeeHeaders(type: Copy) {
    from {
        configurations.workerbeeHeaders.collect { zipTree(it) }
    }
    into project.ext.fbjniHeadersDir
    include "**/*.h"
    include "**/*.hpp"
    includeEmptyDirs = false
}

extractWorkerBeeHeaders.dependsOn(createFbjniDir)

println "fbjniHeadersDir is set to: ${project.ext.fbjniHeadersDir}"
println "CMake arguments: ${android.defaultConfig.externalNativeBuild.cmake.arguments}"

tasks.whenTaskAdded { task ->
    if (task.name.contains('externalNativeBuild')) {
        task.dependsOn(extractWorkerBeeHeaders)
    }
}

preBuild.dependsOn(extractWorkerBeeHeaders)

// Task to clear CMake cache
task clearCMakeCache {
    doLast {
        delete project.layout.buildDirectory.dir("intermediates/cmake").get().asFile
        delete project.layout.buildDirectory.dir(".cxx").get().asFile
    }
}

// Ensure CMake cache is cleared before each build
tasks.matching { it.name.startsWith('configure') && it.name.contains('CMAKE') }.all {
    it.dependsOn(clearCMakeCache)
    it.dependsOn(extractWorkerBeeHeaders)
}

gradle.taskGraph.beforeTask { Task task ->
    if (task.name.startsWith('configure') && task.name.contains('CMAKE')) {
        clearCMakeCache.execute()
        extractWorkerBeeHeaders.execute()
    }
}