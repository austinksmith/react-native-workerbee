buildscript {
    ext {
        reactNativeVersion = "0.75.4" // Update this to your React Native version
    }
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath("com.android.tools.build:gradle:7.3.1")
    }
}

apply plugin: 'com.android.library'

def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

// Define fbjniHeadersDir as a project-wide property
project.ext.fbjniHeadersDir = new File(project.buildDir, "generated/source/fbjni-headers").absolutePath

android {
    namespace "com.austinksmith.reactnativeworkerbee"
    compileSdkVersion safeExtGet('compileSdkVersion', 31)

    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', 21)
        targetSdkVersion safeExtGet('targetSdkVersion', 31)
        versionCode 1
        versionName "1.0"

        externalNativeBuild {
            cmake {
                arguments "-DFBJNI_HEADERS_DIR=${project.ext.fbjniHeadersDir}",
                          "-DNODE_MODULES_DIR=${rootProject.projectDir}/../node_modules",
                          "-DREACT_NATIVE_DIR=${rootProject.projectDir}/../node_modules/react-native",
                          "-DANDROID_STL=c++_shared"
                cppFlags "-std=c++17"
            }
        }

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path file("${project.rootDir}/../node_modules/react-native-workerbee/android/CMakeLists.txt")
            version "3.22.1"
        }
    }

    buildFeatures {
        prefab true
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java {
                srcDirs = ['src/main/java', 'src/main/java-sdk23']
            }
            jniLibs.srcDirs = ['src/main/jniLibs', "${rootProject.projectDir}/../node_modules/react-native/ReactAndroid/src/main/jni/first-party/jsi/"]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

repositories {
    mavenCentral()
    google()
    maven {
        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
        url "$rootDir/../node_modules/react-native/android"
    }
}

dependencies {
    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-android:${reactNativeVersion}"
    implementation "com.facebook.react:hermes-android:${reactNativeVersion}"
    implementation 'com.facebook.fbjni:fbjni:0.3.0'
    implementation 'com.facebook.yoga:proguard-annotations:1.19.0'
    implementation 'androidx.annotation:annotation:1.3.0'
}

configurations {
    workerbeeHeaders
}

dependencies {
    workerbeeHeaders("com.facebook.fbjni:fbjni:0.3.0")
}

task createFbjniDir {
    doLast {
        file(project.ext.fbjniHeadersDir).mkdirs()
    }
}

task extractWorkerBeeHeaders(type: Copy) {
    from {
        configurations.workerbeeHeaders.collect { zipTree(it) }
    }
    into project.ext.fbjniHeadersDir
    include "**/*.h"
    include "**/*.hpp"
    includeEmptyDirs = false
}

extractWorkerBeeHeaders.dependsOn(createFbjniDir)

println "fbjniHeadersDir is set to: ${project.ext.fbjniHeadersDir}"
println "CMake arguments: ${android.defaultConfig.externalNativeBuild.cmake.arguments}"

tasks.whenTaskAdded { task ->
    if (task.name.contains('externalNativeBuild')) {
        task.dependsOn(extractWorkerBeeHeaders)
    }
}

preBuild.dependsOn(extractWorkerBeeHeaders)

// Task to clear CMake cache
task clearCMakeCache {
    doLast {
        delete project.layout.buildDirectory.dir("intermediates/cmake").get().asFile
        delete project.layout.buildDirectory.dir(".cxx").get().asFile
    }
}

// Ensure CMake cache is cleared before each build
tasks.matching { it.name.startsWith('configure') && it.name.contains('CMAKE') }.all {
    it.dependsOn(clearCMakeCache)
    it.dependsOn(extractWorkerBeeHeaders)
}

gradle.taskGraph.beforeTask { Task task ->
    if (task.name.startsWith('configure') && task.name.contains('CMAKE')) {
        clearCMakeCache.execute()
        extractWorkerBeeHeaders.execute()
    }
}

// Task to find React Native libraries
task findReactNativeLibs {
    doLast {
        def aarFiles = fileTree(dir: "${rootProject.buildDir}", include: '**/react-native-*.aar')
        aarFiles.each { aarFile ->
            println "Found React Native AAR: ${aarFile.absolutePath}"
        }

        def jsiFiles = fileTree(dir: "${rootProject.buildDir}", include: '**/libjsi.so')
        jsiFiles.each { jsiFile ->
            println "Found libjsi.so: ${jsiFile.absolutePath}"
        }
    }
}

afterEvaluate {
    // If you're having trouble with the build, uncomment this line to get more detailed output
    // tasks.matching { it.name.startsWith('compile') && it.name.endsWith('Cmake') }.configureEach {
    //     logging.captureStandardOutput LogLevel.INFO
    // }
}